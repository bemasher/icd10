package util

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Attr) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			z.Attr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Attr")
				return
			}
		case "v":
			z.Value, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Attr) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Attr)
	if err != nil {
		err = msgp.WrapError(err, "Attr")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Attr) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o = msgp.AppendString(o, z.Attr)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Attr) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			z.Attr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Attr")
				return
			}
		case "v":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Attr) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Attr) + 2 + msgp.StringPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Diag) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Code, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "d":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "n":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Notes")
				return
			}
			if cap(z.Notes) >= int(zb0002) {
				z.Notes = (z.Notes)[:zb0002]
			} else {
				z.Notes = make([]Note, zb0002)
			}
			for za0001 := range z.Notes {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Notes", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Notes", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "k":
						z.Notes[za0001].Kind, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001, "Kind")
							return
						}
					case "ns":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001, "Notes")
							return
						}
						if cap(z.Notes[za0001].Notes) >= int(zb0004) {
							z.Notes[za0001].Notes = (z.Notes[za0001].Notes)[:zb0004]
						} else {
							z.Notes[za0001].Notes = make([]string, zb0004)
						}
						for za0002 := range z.Notes[za0001].Notes {
							z.Notes[za0001].Notes[za0002], err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Notes", za0001, "Notes", za0002)
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Diag) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "c"
	err = en.Append(0x83, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Notes)))
	if err != nil {
		err = msgp.WrapError(err, "Notes")
		return
	}
	for za0001 := range z.Notes {
		// map header, size 2
		// write "k"
		err = en.Append(0x82, 0xa1, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteString(z.Notes[za0001].Kind)
		if err != nil {
			err = msgp.WrapError(err, "Notes", za0001, "Kind")
			return
		}
		// write "ns"
		err = en.Append(0xa2, 0x6e, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Notes[za0001].Notes)))
		if err != nil {
			err = msgp.WrapError(err, "Notes", za0001, "Notes")
			return
		}
		for za0002 := range z.Notes[za0001].Notes {
			err = en.WriteString(z.Notes[za0001].Notes[za0002])
			if err != nil {
				err = msgp.WrapError(err, "Notes", za0001, "Notes", za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Diag) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "c"
	o = append(o, 0x83, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Code)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendString(o, z.Desc)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Notes)))
	for za0001 := range z.Notes {
		// map header, size 2
		// string "k"
		o = append(o, 0x82, 0xa1, 0x6b)
		o = msgp.AppendString(o, z.Notes[za0001].Kind)
		// string "ns"
		o = append(o, 0xa2, 0x6e, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Notes[za0001].Notes)))
		for za0002 := range z.Notes[za0001].Notes {
			o = msgp.AppendString(o, z.Notes[za0001].Notes[za0002])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Diag) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Code, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "d":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "n":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Notes")
				return
			}
			if cap(z.Notes) >= int(zb0002) {
				z.Notes = (z.Notes)[:zb0002]
			} else {
				z.Notes = make([]Note, zb0002)
			}
			for za0001 := range z.Notes {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Notes", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Notes", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "k":
						z.Notes[za0001].Kind, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001, "Kind")
							return
						}
					case "ns":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001, "Notes")
							return
						}
						if cap(z.Notes[za0001].Notes) >= int(zb0004) {
							z.Notes[za0001].Notes = (z.Notes[za0001].Notes)[:zb0004]
						} else {
							z.Notes[za0001].Notes = make([]string, zb0004)
						}
						for za0002 := range z.Notes[za0001].Notes {
							z.Notes[za0001].Notes[za0002], bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Notes", za0001, "Notes", za0002)
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Notes", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Diag) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Code) + 2 + msgp.StringPrefixSize + len(z.Desc) + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Notes {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.Notes[za0001].Kind) + 3 + msgp.ArrayHeaderSize
		for za0002 := range z.Notes[za0001].Notes {
			s += msgp.StringPrefixSize + len(z.Notes[za0001].Notes[za0002])
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DocIDMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(DocIDMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 bool
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, err = dc.ReadBool()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DocIDMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteBool(zb0005)
		if err != nil {
			err = msgp.WrapError(err, zb0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DocIDMap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		o = msgp.AppendBool(o, zb0005)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DocIDMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(DocIDMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 bool
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, bts, err = msgp.ReadBoolBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DocIDMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004) + msgp.BoolSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Note) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.Kind, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "ns":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Notes")
				return
			}
			if cap(z.Notes) >= int(zb0002) {
				z.Notes = (z.Notes)[:zb0002]
			} else {
				z.Notes = make([]string, zb0002)
			}
			for za0001 := range z.Notes {
				z.Notes[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Notes", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Note) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "k"
	err = en.Append(0x82, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Kind)
	if err != nil {
		err = msgp.WrapError(err, "Kind")
		return
	}
	// write "ns"
	err = en.Append(0xa2, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Notes)))
	if err != nil {
		err = msgp.WrapError(err, "Notes")
		return
	}
	for za0001 := range z.Notes {
		err = en.WriteString(z.Notes[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Notes", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Note) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "k"
	o = append(o, 0x82, 0xa1, 0x6b)
	o = msgp.AppendString(o, z.Kind)
	// string "ns"
	o = append(o, 0xa2, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Notes)))
	for za0001 := range z.Notes {
		o = msgp.AppendString(o, z.Notes[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Note) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.Kind, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "ns":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Notes")
				return
			}
			if cap(z.Notes) >= int(zb0002) {
				z.Notes = (z.Notes)[:zb0002]
			} else {
				z.Notes = make([]string, zb0002)
			}
			for za0001 := range z.Notes {
				z.Notes[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Notes", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Note) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Kind) + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Notes {
		s += msgp.StringPrefixSize + len(z.Notes[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Term) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "n":
			z.Nemod, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Nemod")
				return
			}
		case "c":
			z.Code, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "m":
			z.Manif, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Manif")
				return
			}
		case "as":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Attrs")
				return
			}
			if cap(z.Attrs) >= int(zb0002) {
				z.Attrs = (z.Attrs)[:zb0002]
			} else {
				z.Attrs = make([]Attr, zb0002)
			}
			for za0001 := range z.Attrs {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Attrs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Attrs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						z.Attrs[za0001].Attr, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001, "Attr")
							return
						}
					case "v":
						z.Attrs[za0001].Value, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Term) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "t"
	err = en.Append(0x85, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nemod)
	if err != nil {
		err = msgp.WrapError(err, "Nemod")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.Manif)
	if err != nil {
		err = msgp.WrapError(err, "Manif")
		return
	}
	// write "as"
	err = en.Append(0xa2, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Attrs)))
	if err != nil {
		err = msgp.WrapError(err, "Attrs")
		return
	}
	for za0001 := range z.Attrs {
		// map header, size 2
		// write "a"
		err = en.Append(0x82, 0xa1, 0x61)
		if err != nil {
			return
		}
		err = en.WriteString(z.Attrs[za0001].Attr)
		if err != nil {
			err = msgp.WrapError(err, "Attrs", za0001, "Attr")
			return
		}
		// write "v"
		err = en.Append(0xa1, 0x76)
		if err != nil {
			return
		}
		err = en.WriteString(z.Attrs[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "Attrs", za0001, "Value")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Term) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "t"
	o = append(o, 0x85, 0xa1, 0x74)
	o = msgp.AppendString(o, z.Title)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.Nemod)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Code)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendString(o, z.Manif)
	// string "as"
	o = append(o, 0xa2, 0x61, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Attrs)))
	for za0001 := range z.Attrs {
		// map header, size 2
		// string "a"
		o = append(o, 0x82, 0xa1, 0x61)
		o = msgp.AppendString(o, z.Attrs[za0001].Attr)
		// string "v"
		o = append(o, 0xa1, 0x76)
		o = msgp.AppendString(o, z.Attrs[za0001].Value)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Term) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "n":
			z.Nemod, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nemod")
				return
			}
		case "c":
			z.Code, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "m":
			z.Manif, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Manif")
				return
			}
		case "as":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Attrs")
				return
			}
			if cap(z.Attrs) >= int(zb0002) {
				z.Attrs = (z.Attrs)[:zb0002]
			} else {
				z.Attrs = make([]Attr, zb0002)
			}
			for za0001 := range z.Attrs {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Attrs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Attrs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						z.Attrs[za0001].Attr, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001, "Attr")
							return
						}
					case "v":
						z.Attrs[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Attrs", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Term) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Title) + 2 + msgp.StringPrefixSize + len(z.Nemod) + 2 + msgp.StringPrefixSize + len(z.Code) + 2 + msgp.StringPrefixSize + len(z.Manif) + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Attrs {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.Attrs[za0001].Attr) + 2 + msgp.StringPrefixSize + len(z.Attrs[za0001].Value)
	}
	return
}
